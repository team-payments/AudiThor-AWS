name: Deploy Frontend to S3 + CloudFront

on:
  push:
    branches: [ "main" ]
    paths:
      - "frontend/**"
      - "public/**"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CF_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  S3_PREFIX: frontend-dist

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_FRONTEND }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I?
        run: |
          aws sts get-caller-identity
          aws s3 ls "s3://${S3_BUCKET}/${S3_PREFIX}/" || true

      - name: Select source folder
        run: |
          export SOURCE_DIR=frontend-dist
          echo "SOURCE_DIR=$SOURCE_DIR" >> $GITHUB_ENV
          ls -la "$SOURCE_DIR" || (echo "No existe $SOURCE_DIR" && exit 1)

      # 1) Sincronizamos estructura (añade/borra archivos)
      - name: Sync to S3 (structure + deletes)
        run: |
          aws s3 sync "$SOURCE_DIR" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --delete \
            --only-show-errors
          aws s3 ls "s3://${S3_BUCKET}/${S3_PREFIX}/" --recursive | tail -n 20

      # 2) Reemplazamos metadata para asegurar Content-Type y cache por tipo de fichero
      - name: Set headers for HTML (no cache) + correct MIME
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.html" \
            --metadata-directive REPLACE \
            --cache-control "no-cache" \
            --content-type "text/html; charset=utf-8"

      - name: Set headers for JS
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.js" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "application/javascript; charset=utf-8"

      - name: Set headers for CSS
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.css" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "text/css; charset=utf-8"

      - name: Set headers for JSON (incluye sourcemaps)
        run: |
          # .json
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.json" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "application/json; charset=utf-8"
          # .map (normalmente JSON)
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.map" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "application/json; charset=utf-8"

      - name: Set headers for SVG
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.svg" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "image/svg+xml"

      - name: Set headers for images (png/jpg/jpeg/webp/gif/ico)
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive \
            --exclude "*" \
            --include "*.png" --include "*.jpg" --include "*.jpeg" --include "*.webp" --include "*.gif" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable"
          # ICO explícito por si el inferido falla
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.ico" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "image/x-icon"

      - name: Set headers for fonts
        run: |
          # WOFF2
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.woff2" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "font/woff2"
          # WOFF
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
            --recursive --exclude "*" --include "*.woff" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --content-type "font/woff"

      - name: Create CloudFront invalidation and wait
        run: |
          OUT=$(aws cloudfront create-invalidation \
            --distribution-id "${CF_DISTRIBUTION_ID}" \
            --paths "/*")
          ID=$(echo "$OUT" | jq -r '.Invalidation.Id')
          aws cloudfront wait invalidation-completed \
            --distribution-id "${CF_DISTRIBUTION_ID}" \
            --id "$ID"
          aws cloudfront get-invalidation \
            --distribution-id "${CF_DISTRIBUTION_ID}" \
            --id "$ID"
