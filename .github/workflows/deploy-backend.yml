name: Deploy Backend to ECS (Fargate)

on:
  push:
    branches: [ "main" ]
    paths:
      - "audithor_project/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: "759132943136"
  ECR_REPO: "audithor-api"          # nombre del repo ECR
  ECS_CLUSTER: "audithor-cluster"   # nombre del clúster ECS
  ECS_SERVICE: "audithor-service"   # nombre del servicio ECS
  CONTAINER_NAME: "audithor-api"    # nombre del contenedor en la task definition
  DOCKER_CONTEXT: "./audithor_project"  # carpeta donde está el Dockerfile del backend
  # DOCKERFILE_PATH: "./audithor_project/Dockerfile" # <- descomenta si tu Dockerfile no se llama 'Dockerfile'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_BACKEND }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build, tag and push image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          echo "Registry: $ECR_REGISTRY"
          echo "Building image tag: $IMAGE_TAG"

          # Si tu Dockerfile NO se llama exactamente "Dockerfile", usa la siguiente línea:
          # docker build -f "${DOCKERFILE_PATH}" -t "$ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG" "${DOCKER_CONTEXT}"
          docker build -t "$ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG" "${DOCKER_CONTEXT}"

          docker tag "$ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG" "$ECR_REGISTRY/${ECR_REPO}:latest"
          docker push "$ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${ECR_REPO}:latest"
          echo "IMAGE=$ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Get current task definition
        id: td
        run: |
          set -euo pipefail
          TD_ARN=$(aws ecs describe-services \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}" \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "Current TD ARN: $TD_ARN"

          # Guardamos la respuesta COMPLETA (sin --query) para mantener la estructura válida
          aws ecs describe-task-definition \
            --task-definition "$TD_ARN" \
            --output json > taskdef.json

          echo "TD_ARN=$TD_ARN" >> $GITHUB_OUTPUT

      - name: Register new task definition revision (with new image)
        id: register
        run: |
          set -euo pipefail

          # Validamos que exista el contenedor objetivo y sustituimos la imagen
          NEW_TD=$(jq --arg name "${CONTAINER_NAME}" --arg image "${IMAGE}" '
            .taskDefinition
            | ( .containerDefinitions
                = ( .containerDefinitions
                    | ( [ .[].name ] | index($name) ) as $i
                    | if $i == null then
                        halt_error(1; "Container name \"" + $name + "\" not found in task definition")
                      else
                        map( if .name == $name then .image = $image | . else . end )
                      end
                  )
              )
            # Eliminar campos de solo-lectura/no aceptados al registrar
            | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredBy, .registeredAt, .compatibilities)
          ' taskdef.json)

          echo "$NEW_TD" > new-taskdef.json
          echo "Prepared new task definition:"
          jq '.family, (.containerDefinitions[] | {name, image})' new-taskdef.json

          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "New TD ARN: $NEW_TD_ARN"
          echo "NEW_TD_ARN=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update service
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${{ steps.register.outputs.NEW_TD_ARN }}" \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          set -euo pipefail
          aws ecs wait services-stable \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}"
          echo "Deployment finished successfully ✅"
